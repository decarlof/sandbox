# -*- coding: utf-8 -*-
"""SelectROI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/InsightSoftwareConsortium/itkwidgets/blob/main/examples/integrations/itk/SelectROI.ipynb

### Try this notebook in Google Colab, Binder or SageMaker!


[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/InsightSoftwareConsortium/itkwidgets/blob/main/examples/integrations/itk/SelectROI.ipynb)
[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/InsightSoftwareConsortium/itkwidgets/HEAD?labpath=examples%2Fintegrations%2Fitk%2FSelectROI.ipynb)
[![Open In SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github.com/InsightSoftwareConsortium/itkwidgets/blob/main/examples/integrations/itk/SelectROI.ipynb)
"""

# Install dependencies for this example
import sys

# !{sys.executable} -m pip install -q pooch tqdm "itk-io>=5.3.0" "itk-filtering>=5.3.0" "itkwidgets[all]>=1.0a41" rich

import itk
import pooch
from ngff_zarr import ngff_image_to_itk_image, to_ngff_zarr, itk_image_to_ngff_image
from itkwidgets import view
import zarr
from rich import print

file_name = pooch.retrieve('https://data.kitware.com/api/v1/file/564a5b078d777f7522dbfaa6/download',
                           fname='005_32months_T2_RegT1_Reg2Atlas_ManualBrainMask_Stripped.nrrd',
                           known_hash='a4a5739d5484f48653404763f807ff2b0e1900209cce029d912c2f92797207b6',
                           progressbar=True)

image = itk.imread(file_name)

viewer = view(image)

"""#### Use the cropping planes to select the region of interest, then run the following cells

<img src="https://raw.githubusercontent.com/InsightSoftwareConsortium/itkwidgets/main/examples/integrations/itk/select_roi.gif" style="margin:auto"/>

#### There will be one or more resolution scales available depending on the size of the data. The lower the scale the higher the resolution, with zero being the highest resolution.
"""

# Find the scale that we currently have loaded
loaded_scale = viewer.get_current_scale()

loaded_scale

"""#### By default the information for the current scale is returned when requesting the ROI slices. You can also pass a value in to explicitly request a scale."""

# Request the slice information for the ROI
default_roi_slices = viewer.get_roi_slice()
roi_slices = viewer.get_roi_slice(loaded_scale)

"""#### The results should match!
#### *Note*: The data is streamed in in chunks and the current resolution will improve as each scale becomes available. If you find that the slices do not match check the currently loaded scale (either programmatically or with the UI) - it may have improved since you last checked!
"""

# The results should match
print(f'Slices for loaded scale:       {roi_slices}')
print(f'Slices with default parameter: {default_roi_slices}')

"""#### The ROI region will return the physical, world coordinates for the selection"""

# Get the selected region for the current level
roi_region = viewer.get_roi_region()

print(roi_region)

# get_roi_image will return an ngff image for the currently selected image
# optionally a name can also be passed in to select a specific image if more than one image or label is loaded
roi_image = viewer.get_roi_image(loaded_scale)

print(roi_image)

# Optionally we can also grab the ngff images for all scales
roi_multiscales = viewer.get_roi_multiscale()

print(roi_multiscales)

# Create a new viewer using only the data in the ROI determined above
viewer2 = view(roi_multiscales, rotate=True)

# Save the roi multiscales to an OME-Zarr
to_ngff_zarr('roi.zarr', multiscales=roi_multiscales)

"""If the goal is just to view or process the ROI, use `get_roi_image`. If the goal is to save the entire roi to disk, use `get_roi_multiscales` followed `to_ngff_zarr`. There is a need to re-align array chunks after roi extraction, which can take some time for the entire multiscale dataset with very large images."""

# Get the correpsonding itk.Image
roi_image = ngff_image_to_itk_image(roi_image, wasm=False)

# Run filtering, save to other formats, ...
itk.imwrite(roi_image, 'roi_image.nrrd')

roi_gradient = itk.gradient_magnitude_image_filter(roi_image)
itk.imwrite(roi_gradient, 'roi_gradient.nrrd')

"""A more detailed, manual example of extracting the `itk.Image` is below.

Extract the region from the original image.

Use physical units, which are independent of resolutions, slices
"""

start_index = image.TransformPhysicalPointToIndex([roi_region[0]['x'], roi_region[0]['y'], roi_region[0]['z']])
size = image.TransformPhysicalPointToIndex([roi_region[1]['x'], roi_region[1]['y'], roi_region[1]['z']]) - start_index
extraction_region = itk.ImageRegion[3](start_index, size)

roi_image = itk.extract_image_filter(image, extraction_region=extraction_region)

viewer3 = view(roi_image, rotate=True)